package model

import (
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lcmps/DevicesAPI/model/database"
)

type Device struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Brand     string `json:"brand"`
	State     string `json:"state"`
	CreatedAt string `json:"createdAt"`
}

func (dvc *Device) Marshall(b []byte) error {
	err := json.Unmarshal(b, dvc)
	if err != nil {
		return err
	}
	return nil
}

func (dvc *Device) Unmarshall() ([]byte, error) {
	b, err := json.Marshal(dvc)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func (dvc *Device) TranslateToAPI(d database.Device) {
	*dvc = Device{
		ID:        d.ID.String(),
		Name:      d.Name,
		Brand:     d.Brand,
		State:     d.State,
		CreatedAt: d.CreatedAt.Format("2006-01-02T15:04:05Z07:00"),
	}
}

func (dvc *Device) TranslateToDB() database.Device {
	guid, _ := uuid.Parse(dvc.ID) // Ignoring error as ID is always generated by DB
	return database.Device{
		ID:    guid,
		Name:  dvc.Name,
		Brand: dvc.Brand,
		State: dvc.State,
	}
}

type DeviceList struct {
	Total   int      `json:"total"`
	Devices []Device `json:"devices"`
}

func (dvc *DeviceList) TranslateToAPI(d []database.Device) {
	dvc.Total = len(d)

	for _, d := range d {
		var device Device
		device.TranslateToAPI(d)
		dvc.Devices = append(dvc.Devices, device)
	}
}

func (dvL *DeviceList) Marshall(b []byte) error {
	err := json.Unmarshal(b, dvL)
	if err != nil {
		return err
	}
	return nil
}

func (dvL *DeviceList) Unmarshall() ([]byte, error) {
	b, err := json.Marshal(dvL)
	if err != nil {
		return nil, err
	}
	return b, nil
}
